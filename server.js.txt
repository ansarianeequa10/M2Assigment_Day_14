const dotenv = require('dotenv');
dotenv.config();
const express = require('express');
const mongoose = require('mongoose');
const morgan = require('morgan');
const cors = require('cors');


const app = express();
app.use(express.json());
app.use(morgan('dev'));
app.use(cors());

// Connect DB
mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => console.log('✅ MongoDB connected'))
  .catch((err) => {
    console.error('❌ MongoDB connection error:', err.message);
    process.exit(1);
  });

// Model
const Student = require('./models/Student');

// Health route
app.get('/', (_req, res) => {
  res.json({ message: 'API running' });
});

// Helper: validate ObjectId
const isValidObjectId = (id) => mongoose.Types.ObjectId.isValid(id);

// Optional: create student (for testing)
app.post('/student', async (req, res) => {
  try {
    const { name, email, course } = req.body;
    if (!name || !email || !course) {
      return res.status(400).json({ message: 'name, email, course are required' });
    }
    const student = await Student.create({ name, email, course });
    return res.status(201).json({ message: 'Student created', data: student });
  } catch (err) {
    if (err.code === 11000) {
      return res.status(409).json({ message: 'Email already exists' });
    }
    return res.status(500).json({ message: 'Server error', error: err.message });
  }
});

// PUT /student/:id — Update name/email/course by _id
app.put('/student/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).json({ message: 'Invalid student id' });
    }

    // allow only these fields
    const allowed = ['name', 'email', 'course'];
    const updates = {};
    for (const key of allowed) {
      if (req.body[key] !== undefined) updates[key] = req.body[key];
    }
    if (Object.keys(updates).length === 0) {
      return res.status(400).json({ message: 'No valid fields provided (name, email, course)' });
    }

    const updated = await Student.findByIdAndUpdate(
      id,
      { $set: updates },
      { new: true, runValidators: true }
    );

    if (!updated) {
      return res.status(404).json({ message: 'Student not found' });
    }

    return res.json({ message: 'Student updated successfully', data: updated });
  } catch (err) {
    if (err.code === 11000) {
      return res.status(409).json({ message: 'Email already exists' });
    }
    return res.status(500).json({ message: 'Server error', error: err.message });
  }
});

// DELETE /student/:id — Delete by _id
app.delete('/student/:id', async (req, res) => {
  try {
    const { id } = req.params;
    if (!isValidObjectId(id)) {
      return res.status(400).json({ message: 'Invalid student id' });
    }

    const deleted = await Student.findByIdAndDelete(id);

    if (!deleted) {
      return res.status(404).json({ message: 'Student not found' });
    }

    return res.json({ message: 'Student deleted successfully', data: deleted });
  } catch (err) {
    return res.status(500).json({ message: 'Server error', error: err.message });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`🚀 Server listening on http://localhost:${port}`));
